ИНСТРУКЦИИ ПО СОЗДАНИЮ МОДУЛЕЙ ДЛЯ ПРОГРАММ-КАЧАЛОК


1. ЗАЧЕМ ВООБЩЕ НУЖНЫ МОДУЛИ?

Вместе со скриптом в установочный пакет включены три модуля для работы с наиболее популярными
программами-качалками: cURL, Wget и Axel.
Однако если вы используете другую программу-качалку и хотите иметь возможность закачивать файлы,
добавленные в ADOS, именно этой программой, то вам будет необходим модуль, который позволит
осуществлять управление закачкой через веб-интерфейс ADOS.

Пограмма-качалка, для которой будет создаваться модуль, должна:
	- уметь работать с протоколами HTTP и FTP
	- иметь возможность ограничивать скорость закачки


2. ЧТО ДОЛЖЕН ДЕЛАТЬ МОДУЛЬ?

Модуль должен включать в себя определенный набор функций:
	- проверка версии программы-качалки
	- запуск, приостановка (опционально), возобновление (опционально) и остановка закачки
	- проверка текущего состояния закачки
	- сбор сведений о состоянии закачки


3. СТРУКТУРА МОДУЛЯ

Итак, если вы решили сделать свой собственный модуль для ADOS, то ознакомьтесь, пожалуйста, с
его структурой. Для этого откройте файл module_example.php.

Для создания собственного файла управления модулем на основе данного воспользуйтесь инструкциями,
находящимися в комментариях.
Все параметры в данном файле приведены для наглядности. Параметры, используемые программой-
качалкой, для которой вы будете создавать модуль, могут отличаться от параметров, используемых в
файле. Обратитесь к документации программы.

Для вывода языковых строк отредактируйте файл module_example.lng и впишите, если необходимо,
собственные языковые строки.


4. УСТАНОВКА И ОБНОВЛЕНИЕ МОДУЛЯ

Для установки модуля необходимо создать архив ados_module_key_0.0.0.tar.gz, где
	key 	- ключ вашего модуля,
	0.0.0 	- версия модуля (обязательно соблюдение указанного формата)
Если ваш модуль находится в стадии альфа- или бета-тестирования, то название архива может иметь вид
ados_module_key_0.0.0_alpha_0.tar.gz или ados_module_key_0.0.0_beta_0.tar.gz, где последний 0 - это
номер альфы или беты соответственно.

Архив должен иметь следующую структуру:
.tar.gz
|- module_settings.xml - XML файл с настройками (см. ниже)
|- languages
|  |- ru
|  |  `- module_key.lng - языковой файл для русского языка (см. выше)
|  `- en
|     `- module_key.lng - языковой файл для английского языка
` modules
  `- module_key.php - PHP файл модуля (см. выше)

В случае, если вы захотите добавить языковые файлы для других языков, кроме русского и английского,
вы можете это сделать, добавив соответствующие файлы в поддиректории директории languages, где
названием поддиректории будт двубуквенный код языка (Alpha2).
При установке или обновлении мода пользователю будут скопированы только файлы тех языков, которые у
него установлены.


5. СТРУКТУРА XML ФАЙЛА НАСТРОЕК

Для успешной установки модуля необходимо наличие XML файла, в котором будут укзаны параметры модуля
и список его настроек.
В качестве примера см. файл module_settings.xml

В блоке <module></module> должны находиться следующие элементы:

<key>key</key>
 	Ключ модуля. Он будет использоваться в названиях файлов и классов и для идентификации модуля.
 	Может состоять из символов латинского алфавита и знака подчеркивания.

<name>My Module</name>
 	Название модуля. Обычно соответствует названию программы-качалки.

<name>My Name</name>
 	Ваше имя или псевдоним как автора модуля.

<url>http://www.mysite.com</url>
 	Адрес вашего сайта. Можете оставить пустым, если сайта нет.

<version>1.0.0</version>
 	Текущая версия вашего модуля. Возможнны варианты: 1.0.0 alpha 0 или 1.0.0 beta 0 для альфа- и
 	бета-версий соответсвтенно.

<engine_author>My Best Friend</engine_author>
 	Имя или псевдоним автора программы-качалки, для которой создается модуль.

<engine_url>http://www.mybestfriend.com</engine_url>
 	Адрес официальной страницы программы-качалки.

<engine_version_support>1.2.3 [plus]</engine_version_support>
	Поддерживаемые версии программы-качалки.
	Для обработки старших версий после текущей версии укажите [plus].

В блок <settings></settings> помещаются настройки для модуля. Каждая настройка помещается в субблок
<element force_upgrade="true" can_edit="true"></element> и должна содержать следующие элементы:

<key>setting_key</key>
	Ключ настройки. Может состоять из символов латинского алфавита и знака подчеркивания.

<default>/opt/bin/example</default>
	Значение настройки по умолчанию.

<type>text</type>
	Тип настройки:
		text 		- текстовое поле
		textarea	- многострочное текстовое поле
		dropdown 	- выпадающий список
		multiselect	- поле с возможностью выбора нескольких значений
		yes_no		- перключатель "Да" - "Нет"

<position>1</position>
	Порядковый номер настройки.

Обязательно наличие настройки с ключом engine_path. Она должна содержать путь до исполняемого файла
модуля. Она должна быть редактируемой и не должна обновляться при обновлении модуля (см. ниже).

Чтобы пользователь имел возможность указать значения настроек при установке модуля необходимо для
таких настроек указывать значение атрибута can_edit блока <element> как true.
Для настройки engine_path этот атрибут обязательно должен иметь значение true.

Чтобы настройки автоматически обновлялись при обновлении модуля необходимо для таких настроек
указывать значение атрибута force_upgrade блока <element> как true.
Для настройки engine_path этот атрибут обязательно должен иметь значение false.

Все настройки будут записаны в базу данных и при инициализации модуля их значения будут записаны в
массив $this->settings класса модуля (см. файл module_example.php).


6. ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ

Если что-то осталось непонятным, но вы очень хотите создать собственный модуль, обращайтесь -
постараюсь помочь, но не гарантирую быстрый ответ.

DINI